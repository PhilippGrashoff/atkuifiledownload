<?php declare(strict_types=1);

namespace atkuifiledownload\tests;


use Atk4\Data\Persistence;
use atkuifiledownload\FileDownload;
use atkuifiledownload\FileDownloadInline;
use fileforatk\File;
use traitsforatkdata\TestCase;


class FileDownloadTest extends TestCase
{

    private Persistence $persistence;

    protected $sqlitePersistenceModels = [
        File::class
    ];


    public static function setUpBeforeClass(): void
    {
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub
        if (!defined('FILE_BASE_PATH')) {
            define('FILE_BASE_PATH', dirname(__DIR__));
        }
        if (!defined('SAVE_FILES_IN')) {
            define('SAVE_FILES_IN', 'tests/testfiles');
        }
    }

    public function setUp(): void
    {
        parent::setUp();
        $this->persistence = $this->getSqliteTestPersistence();
    }

    public function test400CodeIfGetParamNotSet(): void
    {
        ob_start();
        $fileDownload = new FileDownload($this->persistence, ['terminate' => false]);
        $fileDownload->sendFile();
        self::assertEquals('', ob_get_contents());
        self::assertSame(400, http_response_code());
        ob_end_clean();
    }

    public function test400CodeIfGetParamIsEmpty(): void
    {
        $_GET[$this->getDefaultParamName()] = '';
        ob_start();
        $fileDownload = new FileDownload($this->persistence, ['terminate' => false]);
        $fileDownload->sendFile();
        self::assertEquals('', ob_get_contents());
        self::assertSame(400, http_response_code());
        ob_end_clean();
    }

    public function test404CodeIfFileNotFound(): void
    {
        $file = $this->createTestFile();
        $_GET[$this->getDefaultParamName()] = 'nonexistingId';
        ob_start();
        $fileDownload = new FileDownload($this->persistence, ['terminate' => false]);
        $fileDownload->sendFile();
        self::assertEquals('', ob_get_contents());
        self::assertSame(404, http_response_code());
        ob_end_clean();
    }

    /**
     * @runInSeparateProcess
     */
    public function testFileDownload(): void
    {
        $file = $this->createTestFile();
        $fileDownload = new FileDownload($this->persistence, ['terminate' => false]);
        $_GET[$this->getDefaultParamName()] = $file->getCryptId();
        ob_start();
        $fileDownload->sendFile();
        self::assertStringContainsString(
            file_get_contents($file->getFullFilePath()),
            ob_get_contents(),
        );
        ob_end_clean();
        unset($_GET[$this->getDefaultParamName()]);
    }

    /**
     * @runInSeparateProcess
     */
    public function testInlineFileDownload(): void
    {
        $file = $this->createTestFile();
        $fileDownload = new FileDownloadInline($this->persistence, ['terminate' => false]);
        $_GET[$this->getDefaultParamName()] = $file->getCryptId();
        ob_start();
        $fileDownload->sendFile();
        self::assertStringContainsString(
            file_get_contents($file->getFullFilePath()),
            ob_get_contents(),
        );
        ob_end_clean();
        unset($_GET[$this->getDefaultParamName()]);
    }

    protected function getDefaultParamName(): string
    {
        return (new FileDownload($this->persistence, ['terminate' => false]))->paramNameForCryptId;
    }

    protected function createTestFile(): File
    {
        $file = new File($this->persistence);
        $file->set('value', 'testfile.txt');
        $file->set('path', '/tests/testfiles');
        $file->save();

        return $file;
    }
}